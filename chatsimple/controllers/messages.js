// üìÅ controllers/messages.js
const Conversation = require('../schemas/Conversation');
const Message = require('../schemas/messages');

module.exports = {
    // T·∫°o ho·∫∑c l·∫•y m·ªôt cu·ªôc tr√≤ chuy·ªán gi·ªØa hai ng∆∞·ªùi d√πng
    GetOrCreateConversation: async function (user1Id, user2Id) {
        try {
            let convo = await Conversation.findOne({
                participants: { $all: [user1Id, user2Id], $size: 2 }
            });

            if (!convo) {
                convo = new Conversation({ participants: [user1Id, user2Id] });
                await convo.save();
            }
            return convo;
        } catch (err) {
            throw new Error(err.message);
        }
    },

    // G·ª≠i m·ªôt tin nh·∫Øn trong m·ªôt cu·ªôc tr√≤ chuy·ªán
    SendMessage: async function (conversationId, senderId, toUserId, content) {
        try {
            const msg = new Message({
                conversation: conversationId,
                receiver: toUserId,
                sender: senderId,
                content: content
            });
            return await msg.save();
        } catch (err) {
            throw new Error(err.message);
        }
    },

    // L·∫•y tin nh·∫Øn c·ªßa m·ªôt cu·ªôc tr√≤ chuy·ªán
    GetMessagesByConversation: async function (conversationId) {
        try {
            return await Message.find({ conversation: conversationId });
        } catch (err) {
            throw new Error(err.message);
        }
    },

    // L·∫•y danh s√°ch c√°c cu·ªôc tr√≤ chuy·ªán c·ªßa user
    GetConversationsByUser: async function (userId) {
        try {
            return await Conversation.find({
                participants: userId
            });
        } catch (err) {
            throw new Error(err.message);
        }
    },
    GetMessagesBetween: async function (user1Id, user2Id) {
        try {
            // 1. T√¨m conversation
            const convo = await Conversation.findOne({
                participants: { $all: [user1Id, user2Id], $size: 2 }
            });

            if (!convo) return []; // Kh√¥ng c√≥ cu·ªôc tr√≤ chuy·ªán n√†o

            // 2. T√¨m t·∫•t c·∫£ tin nh·∫Øn trong conversation ƒë√≥
            const messages = await Message.find({
                conversation: convo._id
            }).sort({ createdAt: 1 }); // s·∫Øp x·∫øp theo th·ªùi gian tƒÉng d·∫ßn

            return messages;
        } catch (err) {
            throw new Error(err.message);
        }
    },
};
